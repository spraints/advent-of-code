#!/usr/bin/env ruby
#/ Usage: ./run [YYYY DD]
#/ Run all scripts for the specified day of Advent of Code.
#/ Default is today.
#/
#/ For example, for day 1 of 2020, you might name inputs like:
#/  2020/examples/01.simple.txt
#/  2020/examples/01.complex.txt
#/  2020/input/01.txt
#/ And scripts like:
#/  2020/01.rb
#/  2020/py/01.py

# todos:
# - auto download examples and inputs.

require "thread"

def main(year, day)
  inputs = []
  scripts = []
  Dir["**/*"].each do |file|
    case typeof(file, year: year, day: day)
    when :input
      inputs << file
    when :script
      scripts << file
    end
  end
  c = {}
  t = []
  t << str_bg("======= Line counts =======")
  t << Thread.new { `wc -l #{scripts.join(" ")} 2>&1` }
  inputs.each do |input|
    t << str_bg("======= #{input} =======")
    scripts.each do |script|
      t << str_bg(">>> #{script} < #{input}")
      t << run_bg(script: script, input: input, c: c)
      t << str_bg("")
    end
  end
  t.each do |x|
    puts x.value
  end
end

def str_bg(str)
  Thread.new { str }
end

def run_bg(script:, input:, c:)
  case File.extname(script)
  when ".rb"
    Thread.new { capture_output "ruby", script, in: input }
  when ".py"
    Thread.new { capture_output "python3", script, in: input }
  when ".rs"
    c_th = c[script]
    if c_th.nil?
      c_th = c[script] = compile_bg(script) { |out_file| ["rustc", "-O", "-o", out_file, script] }
    end
    Thread.new do
      res = c_th.value
      if res.ok?
        # warm up
        system res.bin, in: "/dev/null", out: "/dev/null", err: "/dev/null"
        capture_output res.bin, in: input
      else
        res.output
      end
    end
  when ".go"
    c_th = c[script]
    if c_th.nil?
      c_th = c[script] = compile_bg(script) { |out_file| ["go", "build", "-o", out_file, script] }
    end
    Thread.new do
      res = c_th.value
      if res.ok?
        # warm up
        system res.bin, in: "/dev/null", out: "/dev/null", err: "/dev/null"
        capture_output res.bin, in: input
      else
        res.output
      end
    end
  else
    puts "Unrecognized script extension."
  end
end

def capture_output(*cmd, **opts)
  capture_output2(*cmd, **opts).first
end

def capture_output2(*cmd, **opts)
  r, w = IO.pipe
  start = Time.now
  pid = spawn(*cmd, **opts, out: w, err: w)
  w.close
  res = r.read
  elapsed = Time.now - start

  r.close
  _, status = Process.wait2(pid)

  [
    sprintf("%s> elapsed: %d ms\n", res, 1000 * elapsed),
    status,
  ]
end

def compile_bg(script)
  bin = ".output/#{script}"
  cmd = yield bin

  Thread.new do
    system "mkdir", "-p", File.dirname(bin)

    output, status = capture_output2(*cmd)

    Result.new \
      status: status,
      output: output,
      bin: bin
  end
end

class Result
  def initialize(status:, output:, bin:)
    @status = status
    @output = output
    @bin = bin
  end

  attr_reader :output, :bin

  def ok?
    @status.success?
  end
end

def typeof(file, year:, day:)
  parts = file.split("/")
  return :wrong_year unless parts.any? { |part| part.to_i == year }
  return :wrong_day  unless parts.any? { |part| part.to_i == day  }
  return :input if parts.include?("input") || parts.include?("examples")
  return :script
end

if ARGV.empty?
  now = Time.now
  main(now.year, now.day)
  exit 0
end

if ARGV.size != 2 || ARGV[0].size != 4 || ARGV[1].size != 2
  File.readlines(__FILE__).grep(/^#\//).each { |line| puts line[3..-1] }
  exit 1
end

main(*ARGV.map(&:to_i))
